apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = "dk.appdictive.feedbackdialog"
version = "${project.getVersionName()}"

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode project.getVersionCode()
        versionName "${project.getVersionName()}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api 'com.android.support:appcompat-v7:25.3.1'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def siteUrl = 'https://github.com/appdictive/AppFeedbackDialog'
def gitUrl = 'https://github.com/appdictive/AppFeedbackDialog.git'

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives'] //When uploading configuration files

    pkg {
        repo = 'maven'
        userOrg = 'appdictive'
        name = 'feedback-dialog-library'
        desc = 'Android Dialog to allow selective user feedback.'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        issueTrackerUrl = 'https://github.com/appdictive/AppFeedbackDialog/issues'
        licenses = ['MIT']
        labels = ['android', 'dialog', 'feedback', 'aar']
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Android Dialog to allow selective user feedback.'
                url siteUrl
                licenses {
                    license {
                        name 'MIT'
                        url 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id 'tobalr'
                        name 'Tobias Alr√∏e'
                        email 'tobiasalroe@gmail.com'
                    }
                    developer {
                        id 'jesperlr'
                        name 'Jesper Lysgaard Rasmussen'
                        email 'repsejlysras@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

//task findConventions << {
//    println project.getConvention()
//}
